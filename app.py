import tkinter as tk
from tkinter import messagebox
import os
import subprocess
import sys
import threading
import time

class ScreenshotApp:
    def __init__(self):
        self.root = tk.Tk()
        self.setup_ui()
        self.setup_hotkey()
        
    def setup_ui(self):
        self.root.title('–°–∫—Ä–∏–Ω—à–æ—Ç–µ—Ä')
        self.root.geometry('350x180')
        self.root.resizable(False, False)
        self.root.configure(bg='#f0f0f0')
        
        title_label = tk.Label(
            self.root, 
            text='üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç–µ—Ä', 
            font=('Arial', 16, 'bold'),
            bg='#f0f0f0'
        )
        title_label.pack(pady=15)
        
    
        self.btn = tk.Button(
            self.root,
            text='–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç (F2)',
            command=self.make_screenshot,
            bg='#4CAF50',
            fg='white',
            font=('Arial', 12),
            padx=20,
            pady=10,
            width=20
        )
        self.btn.pack(pady=10)
        
        hotkey_info = tk.Label(
            self.root,
            text="F2 - –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\nCtrl+Q - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            font=('Arial', 9),
            bg='#f0f0f0',
            justify=tk.CENTER
        )
        hotkey_info.pack(pady=5)
        
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def setup_hotkey(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def hotkey_listener():
            try:
                import keyboard
                keyboard.add_hotkey('f2', self.make_screenshot)
                keyboard.add_hotkey('ctrl+q', self.on_closing)
                keyboard.add_hotkey('ctrl+w', self.on_closing)
                
                while True:
                    if not self.root.winfo_exists():
                        break
                    time.sleep(0.1)
                        
            except ImportError:
                print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à: {e}")
        
        hotkey_thread = threading.Thread(target=hotkey_listener, daemon=True)
        hotkey_thread.start()
        
    def make_screenshot(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
          
            self.show_notification("–ó–∞–ø—É—Å–∫ Snipping Tool...")
            process = subprocess.Popen(
                ['snippingtool', '/clip'], 
                shell=True, 
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.root.after(1000, lambda: self.show_success_message())
            
        except Exception as e:
            self.show_error_message(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def show_notification(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∫–Ω–æ–ø–∫–∏"""
        original_text = self.btn.cget('text')
        self.btn.config(text=message, bg='#FF9800')
        self.root.update()
        
        self.root.after(1000, lambda: self.btn.config(text=original_text, bg='#4CAF50'))
    
    def show_success_message(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        messagebox.showinfo(
            '–ì–æ—Ç–æ–≤–æ!', 
            'Snipping Tool –∑–∞–ø—É—â–µ–Ω!\n\n–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞,\n–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+V –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.'
        )
    
    def show_error_message(self, error_text):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        messagebox.showerror('–û—à–∏–±–∫–∞', error_text)
    
    def on_closing(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            import keyboard
            keyboard.unhook_all()
        except:
            pass
        finally:
            self.root.destroy()
            os._exit(0)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.on_closing()

if __name__ == "__main__":
    app = ScreenshotApp()
    app.run()
